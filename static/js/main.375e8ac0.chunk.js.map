{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLocaleLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GAAW,IACbC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACQ,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,eAAUJ,EAAV,QAAsBK,IAAG,+BAA0BH,EAA1B,cACjC,6BACI,4BAAKF,GACL,2BAAIC,MCcTK,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACI,kBAAC,EAAD,CACAC,IAAKL,EAAOI,GAAGT,GACfA,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAIzB,OACI,6BACKO,EADL,MCDOK,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKZ,UAAU,OACX,2BACIA,UAAU,mCACVa,KAAK,SACLC,YAAY,qBACZC,SAAUH,MCCXI,EARA,SAACpB,GACZ,OACI,yBAAKqB,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAmBC,OAAO,UAC3DxB,EAAMyB,WCgBJC,E,kDAlBX,WAAY1B,GAAO,IAAD,8BACd,cAAMA,IACD2B,MAAQ,CACTC,UAAU,GAHA,E,8DAMJC,EAAOC,GACrBC,KAAKJ,MAAM,CAACC,UAAS,M,+BAIjB,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAK/B,MAAMyB,a,GAfCO,aCsDZC,G,wDA7CX,aAAe,IAAD,8BACV,gBAgBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAErB,YAAaoB,EAAME,OAAOC,SAhB1C,EAAKX,MAAQ,CACTnB,OAAQ,GACRO,YAAa,IAJP,E,gEAQO,IAAD,OAChBwB,MAAM,6CAA6CC,MAAK,SAAAC,GACpD,OAAOA,EAASC,UAEfF,MAAK,SAAAG,GACF,EAAKP,SAAS,CAAE5B,OAAQmC,S,+BAQ1B,IAAD,EAC2BZ,KAAKJ,MAA7BnB,EADH,EACGA,OAAQO,EADX,EACWA,YACV6B,EAAepC,EAAOqC,QAAO,SAAAC,GAC/B,OAAOA,EAAM7C,KAAK8C,oBAAoBC,SAASjC,MAEnD,OAAQP,EAAOyC,OAKP,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eAEA,kBAAC,EAAD,CAAWY,aAAce,KAAKG,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAAQoC,OAVzB,yBAAKxC,UAAU,MAAf,UACU,wBAAIA,UAAU,MAAd,gB,GA7BL4B,cCEEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,iCACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.375e8ac0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const { name, email, id } = props; //destracturing props\n    return (    \n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                <img alt={`robo ${name} img`} src={`https://robohash.org/${id}?200x200`} />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n// import {robots} from './robots'; // We don't need imports robot, because we imported them from indes.js file\n\n\nconst CardList = ({robots}) => {\n    const cardArray = robots.map((user, i) => { // maping each objekt in array robots \n        return (\n            <Card \n            key={robots[i].id}  // in React have to be key value\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n            />\n        ) \n    })\n    return (\n        <div>\n            {cardArray};\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Searchbox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type=\"search\"\n                placeholder=\"Type your roboname\"\n                onChange={searchChange}\n            />\n        </div>\n\n    )\n}\n\nexport default Searchbox;","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow:'scroll',border:'1px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\ncomponentDidCatch(error, info){\n    this.state({hasError:true});\n}\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooops. That is not good</h1>\n        } \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundry';\n// import { robots } from './robots';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('http://jsonplaceholder.typicode.com/users').then(response => {\n            return response.json();\n        })\n            .then(users => {\n                this.setState({ robots: users });\n            })\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLocaleLowerCase().includes(searchfield);\n        })\n        return !robots.length ?\n            (<div className=\"tc\">\n                return <h1 className='f1'>Loading</h1>\n            </div>) :\n            (\n                <div className='tc'>\n                    <h1 className='f1'>Robofriends</h1>\n\n                    <Searchbox searchChange={this.onSearchChange} />\n                    <Scroll>\n                    <ErrorBoundry>\n                    <CardList robots={filterRobots} />\n                    </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <section>\n      <App />\n    </section>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}